Page 1  ../src/sinegen.asm
ADI easmblkfn (4.1.3.2) 10 Oct 2017 09:47:07

offset       opcode  line
======       ======  ====
                        1 /*
                        2 Program sinegen is a simple dual channel sine wave generator, which uses a look-up table for the coefficients.
                        3 In the example below, it produces frequencies of 6 kHz and 12 kHz.
                        4 
                        5 Author: Patrick Gaydecki
                        6 Date  : 02.10.2017   
                        7 */
                        8 
     0                  9 .section L1_data_a;  // Linker places 12 kHz LUT starting at 0x11800000
                       10 .BYTE4/r32 lut1[]=0.0r,0.999r,0.0r,-0.999r;
     0                 11 .section L1_data_b;  // Linker places 6 kHz LUT starting at 0x11900000
                       12 .BYTE4/r32 lut2[]=0.0r,0.7071r,0.999r,0.7071r,0.0r,-0.7071r,-0.999r,-0.7071r;
     0                 13 .section program; 
                       14 .global _main; 
     0                 15 .align 4;  
                       16 # include <defBF706.h>   
                       17 
     0                 18 _main:
     0         00e3    19 call codec_configure; 
     2         0000    19 
     4                 19 
     4         00e3    20 call sport_configure;
     6         0000    20 
     8                 20 
                       21 // Set modulo addressing for each channel
     8         08da    22 P0=length(lut1)*4;
     a         0000    22 
     c         0000    22 
     e         0000    22 
    10         10da    23 I0=0x11800000;B0=I0;L0=P0;
    12         8011    23 
    14         0000    23 
    16         0000    23 
    18         8036    23 
    1a         6036    23 
    1c         08da    24 P0=length(lut2)*4;
    1e         0000    24 
    20         0000    24 
    22         0000    24 
    24         11da    25 I1=0x11900000;B1=I1;L1=P0;
    26         9011    25 
    28         0000    25 
    2a         0000    25 
    2c         8936    25 
    2e         6836    25 
    30                 26 get_audio:
    30                 27 wait_left:
                       28 // Wait for left data then dummy read
    30         00d8    29 R0=[REG_SPORT0_CTL_B]; 
    32         0420    29 
    34         80d0    29 
    36         0000    29 
    38         f849    30 CC=BITTST(R0, 31); 
    3a         0010    31 if !CC jump wait_left;
    3c                 31 
    3c         00d8    32 R0=[REG_SPORT0_RXPRI_B];
    3e         0420    32 
    40         c4d0    32 
    42         0000    32 
                       33 // Load 6 kHz data from LUT and write to codec
                       34 // Note 8-bit shift right since codec is 24-bit 
    44         009c    35 R0=[I0++]; 
    46         82c6    36 R0=R0>>8;
    48         c081    36 
    4a         00d8    37 [REG_SPORT0_TXPRI_A]=R0;
    4c         0420    37 
    4e         40d0    37 
    50         0002    37 
    52                 38 wait_right:
                       39 // Wait for right data then dummy read
    52         00d8    40 R0=[REG_SPORT0_CTL_B]; 
    54         0420    40 
    56         80d0    40 
    58         0000    40 
    5a         f049    41 CC=BITTST(R0, 30); 
    5c         0010    42 if !CC jump wait_right;
    5e                 42 
    5e         00d8    43 R0=[REG_SPORT0_RXPRI_B];
    60         0420    43 
    62         c4d0    43 
    64         0000    43 
                       44 // Load 6 kHz data from LUT and write to codec
                       45 // Note 8-bit shift right since codec is 24-bit 
    66         089c    46 R0=[I1++];
    68         82c6    47 R0=R0>>8;
    6a         c081    47 
    6c         00d8    48 [REG_SPORT0_TXPRI_A]=R0;
    6e         0420    48 
    70         40d0    48 
    72         0002    48 
    74         0020    49 jump get_audio;
    76                 49 
    76         1000    50 rts;
    78                 51 ._main.end:
                       52 
                       53 // Function codec_configure initialises the ADAU1761 codec. Refer to the control register
                       54 // descriptions, page 51 onwards of the ADAU1761 data sheet.
    78                 55 codec_configure:
    78         6701    56 [--SP] = RETS;                            // Push stack (only for nested calls)
    7a         0960    57 R1=0x01(X); R0=0x4000(X); call TWI_write; // Enable master clock, disable PLL
    7c         20e1    57 
    7e         0040    57 
    80         00e3    57 
    82         0000    57 
    84                 57 
    84         21e1    58 R1=0x7f(X); R0=0x40f9(X); call TWI_write; // Enable all clocks
    86         7f00    58 
    88         20e1    58 
    8a         f940    58 
    8c         00e3    58 
    8e         0000    58 
    90                 58 
    90         1960    59 R1=0x03(X); R0=0x40fa(X); call TWI_write; // Enable all clocks
    92         20e1    59 
    94         fa40    59 
    96         00e3    59 
    98         0000    59 
    9a                 59 
    9a         0960    60 R1=0x01(X); R0=0x4015(X); call TWI_write; // Set serial port master mode
    9c         20e1    60 
    9e         1540    60 
    a0         00e3    60 
    a2         0000    60 
    a4                 60 
    a4         9960    61 R1=0x13(X); R0=0x4019(X); call TWI_write; // Set ADC to on, both channels
    a6         20e1    61 
    a8         1940    61 
    aa         00e3    61 
    ac         0000    61 
    ae                 61 
    ae         0961    62 R1=0x21(X); R0=0x401c(X); call TWI_write; // Enable left channel mixer
    b0         20e1    62 
    b2         1c40    62 
    b4         00e3    62 
    b6         0000    62 
    b8                 62 
    b8         21e1    63 R1=0x41(X); R0=0x401e(X); call TWI_write; // Enable right channel mixer
    ba         4100    63 
    bc         20e1    63 
    be         1e40    63 
    c0         00e3    63 
    c2         0000    63 
    c4                 63 
    c4         1960    64 R1=0x03(X); R0=0x4029(X); call TWI_write; // Turn on power, both channels
    c6         20e1    64 
    c8         2940    64 
    ca         00e3    64 
    cc         0000    64 
    ce                 64 
    ce         1960    65 R1=0x03(X); R0=0x402a(X); call TWI_write; // Set both DACs on
    d0         20e1    65 
    d2         2a40    65 
    d4         00e3    65 
    d6         0000    65 
    d8                 65 
    d8         0960    66 R1=0x01(X); R0=0x40f2(X); call TWI_write; // DAC gets L, R input from serial port
    da         20e1    66 
    dc         f240    66 
    de         00e3    66 
    e0         0000    66 
    e2                 66 
    e2         0960    67 R1=0x01(X); R0=0x40f3(X); call TWI_write; // ADC sends L, R input to serial port
    e4         20e1    67 
    e6         f340    67 
    e8         00e3    67 
    ea         0000    67 
    ec                 67 
    ec         5960    68 R1=0x0b(X); R0=0x400a(X); call TWI_write; // Set left line-in gain to 0 dB
    ee         20e1    68 
    f0         0a40    68 
    f2         00e3    68 
    f4         0000    68 
    f6                 68 
    f6         5960    69 R1=0x0b(X); R0=0x400c(X); call TWI_write; // Set right line-in gain to 0 dB
    f8         20e1    69 
    fa         0c40    69 
    fc         00e3    69 
    fe         0000    69 
   100                 69 
   100         21e1    70 R1=0xe7(X); R0=0x4023(X); call TWI_write; // Set left headphone volume to 0 dB
   102         e700    70 
   104         20e1    70 
   106         2340    70 
   108         00e3    70 
   10a         0000    70 
   10c                 70 
   10c         21e1    71 R1=0xe7(X); R0=0x4024(X); call TWI_write; // Set right headphone volume to 0 dB
   10e         e700    71 
   110         20e1    71 
   112         2440    71 
   114         00e3    71 
   116         0000    71 
   118                 71 
   118         0160    72 R1=0x00(X); R0=0x4017(X); call TWI_write; // Set codec default sample rate, 48 kHz
   11a         20e1    72 
   11c         1740    72 
   11e         00e3    72 
   120         0000    72 
   122                 72 
   122         0000    73 NOP;
   124         2701    74 RETS = [SP++];                            // Pop stack (only for nested calls)
   126         1000    75 RTS;
   128                 76 codec_configure.end:
                       77 
                       78 // Function sport_configure initialises the SPORT0. Refer to pages 26-59, 26-67,
                       79 // 26-75 and 26-76 of the ADSP-BF70x Blackfin+ Processor Hardware Reference manual.
   128                 80 sport_configure:
   128         20e1    81 R0=0x3F0(X); [REG_PORTC_FER]=R0;          // Set up Port C in peripheral mode
   12a         f003    81 
   12c         00d8    81 
   12e         0420    81 
   130         0001    81 
   132         0002    81 
   134         20e1    82 R0=0x3F0(X); [REG_PORTC_FER_SET]=R0;      // Set up Port C in peripheral mode
   136         f003    82 
   138         00d8    82 
   13a         0420    82 
   13c         0401    82 
   13e         0002    82 
   140         00da    83 R0=0x2001973; [REG_SPORT0_CTL_A]=R0;      // Set up SPORT0 (A) as TX to codec, 24 bits
   142         0002    83 
   144         7319    83 
   146         0000    83 
   148         00d8    83 
   14a         0420    83 
   14c         00d0    83 
   14e         0002    83 
   150         00da    84 R0=0x0400001; [REG_SPORT0_DIV_A]=R0;      // 64 bits per frame, clock divisor of 1
   152         4000    84 
   154         0100    84 
   156         0000    84 
   158         00d8    84 
   15a         0420    84 
   15c         04d0    84 
   15e         0002    84 
   160         20e1    85 R0=0x1973(X); [REG_SPORT0_CTL_B]=R0;      // Set up SPORT0 (B) as RX from codec, 24 bits
   162         7319    85 
   164         00d8    85 
   166         0420    85 
   168         80d0    85 
   16a         0002    85 
   16c         00da    86 R0=0x0400001; [REG_SPORT0_DIV_B]=R0;      // 64 bits per frame, clock divisor of 1
   16e         4000    86 
   170         0100    86 
   172         0000    86 
   174         00d8    86 
   176         0420    86 
   178         84d0    86 
   17a         0002    86 
   17c         1000    87 RTS;
   17e                 88 sport_configure.end:
                       89 
                       90 // Function TWI_write is a simple driver for the TWI. Refer to page 24-15 onwards
                       91 // of the ADSP-BF70x Blackfin+ Processor Hardware Reference manual.
   17e                 92 TWI_write:
   17e         82c6    93 R3=R0 <<0x8; R0=R0 >>>0x8; R2=R3|R0;      // Reverse low order and high order bytes
   180         4086    93 
   182         82c6    93 
   184         c001    93 
   186         8356    93 
   188         20e1    94 R0=0x3232(X); [REG_TWI0_CLKDIV]=R0;       // Set duty cycle
   18a         3232    94 
   18c         00d8    94 
   18e         0420    94 
   190         00a0    94 
   192         0002    94 
   194         20e1    95 R0=0x008c(X); [REG_TWI0_CTL]=R0;          // Set prescale and enable TWI
   196         8c00    95 
   198         00d8    95 
   19a         0420    95 
   19c         04a0    95 
   19e         0002    95 
   1a0         c061    96 R0=0x0038(X); [REG_TWI0_MSTRADDR]=R0;     // Address of codec
   1a2         00d8    96 
   1a4         0420    96 
   1a6         1ca0    96 
   1a8         0002    96 
   1aa         00d8    97 [REG_TWI0_TXDATA16]=R2;                   // Address of register to set, LSB then MSB
   1ac         0420    97 
   1ae         84a0    97 
   1b0         0202    97 
   1b2         20e1    98 R0=0x00c1(X); [REG_TWI0_MSTRCTL]=R0;      // Command to send three bytes and enable tx
   1b4         c100    98 
   1b6         00d8    98 
   1b8         0420    98 
   1ba         14a0    98 
   1bc         0002    98 
   1be         6701    99 [--SP] = RETS; call delay; RETS = [SP++]; // Delay
   1c0         00e3    99 
   1c2         0000    99 
   1c4                 99 
   1c4         2701    99 
   1c6         00d8   100 [REG_TWI0_TXDATA8]=R1;                    // Data to write
   1c8         0420   100 
   1ca         80a0   100 
   1cc         0102   100 
   1ce         6701   101 [--SP] = RETS; call delay; RETS = [SP++]; // Delay
   1d0         00e3   101 
   1d2         0000   101 
   1d4                101 
   1d4         2701   101 
   1d6         20e1   102 R0=0x050; [REG_TWI0_ISTAT]=R0;            // Clear TXERV interrupt
   1d8         5000   102 
   1da         00d8   102 
   1dc         0420   102 
   1de         20a0   102 
   1e0         0002   102 
   1e2         6701   103 [--SP] = RETS; call delay; RETS = [SP++]; // Delay
   1e4         00e3   103 
   1e6         0000   103 
   1e8                103 
   1e8         2701   103 
   1ea         8060   104 R0=0x010; [REG_TWI0_ISTAT]=R0;            // Clear MCOMP interrupt
   1ec         00d8   104 
   1ee         0420   104 
   1f0         20a0   104 
   1f2         0002   104 
   1f4         1000   105 rts;
   1f6                106 TWI_write.end:
                      107 
                      108 // Function delay introduces a delay to allow TWI communication
   1f6                109 delay:
   1f6         08da   110 P0=0x8000;
   1f8         0000   110 
   1fa         0080   110 
   1fc         0000   110 
   1fe         a2e0   111 loop LC0=P0;
   200         0000   111 
   202                111 
   206         0000   112 NOP; NOP; NOP;
   202         0000   112 
   204         0000   112 
   208                113 loop_end;
   206                113 
   208         1000   114 RTS;
   20a                115 delay.end:
